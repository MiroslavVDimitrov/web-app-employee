
server.port=8083
spring.servlet.multipart.max-file-size=2MB
spring.servlet.multipart.max-request-size=2MB

# App Properties
jwtCookieName=jwt
jwtRefreshCookieName=jwt-refresh

#bezkoder.app.jwtExpirationMs= 86400000
#bezkoder.app.jwtRefreshExpirationMs= 86400000

## For test
jwtExpirationMs= 360000
jwtRefreshExpirationMs= 1800000

# App Properties
jwtSecret= ======================One=Way=tICKET===========================


spring.datasource.url=jdbc:mysql://localhost:3306/web-app-employee
spring.datasource.username=user2
spring.datasource.password=user2


#spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver




 # create – Hibernate first drops existing tables, then creates new tables
# update – the object model created based on the mappings (annotations or XML) is compared with the existing schema, and then Hibernate updates the schema according to the diff. It never deletes the existing tables or columns even if they are no more required by the application
# create-drop – similar to create, with the addition that Hibernate will drop the database after all operations are completed. Typically used for unit testing
# validate – Hibernate only validates whether the tables and columns exist, otherwise it throws an exception
 # none – this value effectively turns off the DDL generation

spring.jpa.hibernate.ddl-auto=update


spring.jpa.show-sql=true
# Казва на hibernate да валидира(активира) @Column(nullable = false).
#spring.jpa.properties.hibernate.check_nullability=true

#spring.jpa.show-sql=true
#spring.jpa.hibernate.naming-strategy=org.hibernate.cfg.DefaultNamingStrategy




# logging - Показва подробно описание  съобщенията в конзолата
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} %-5level %logger{36} - %msg%n
logging.level.org.hibernate.SQL=debug